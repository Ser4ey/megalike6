import sqlite3

from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.dispatcher.storage import FSMContext
from aiogram.types import ReplyKeyboardRemove, CallbackQuery
from loader import dp, db_of_active_users, db_of_history_users
from states import Start_new_user_reg
from keyboards.default import start_menu, start_menu2
from keyboards.default import main_menu

from keyboards.inline.yes_or_no import yes_or_no_inline



# def valid_account(sab, posts):
#     try:

@dp.message_handler(CommandStart())
async def bot_start(message: types.Message, state: FSMContext):

    name = message.from_user.full_name
    id = message.from_user.id

    if not db.select_user(id=id) == None:
        await message.answer(r'–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ –∫–æ–º–∞–Ω–¥–µ /start', reply_markup=main_menu)
        await Start_new_user_reg.problem_fix.set()
        await state.finish()
        return

    await message.answer(text=f'''
–ü—Ä–∏–≤–µ—Ç üëã! –≠—Ç–æ –±–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è Instagram.
–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ª–∞–π–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞ —Å–≤–æ–∏ –ø–æ—Å—Ç—ã.
–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª–∞"
    ''', reply_markup=start_menu)

    try:
        db.add_user(id=id, name=name, balance=0)
    except sqlite3.IntegrityError as err:
        print(err)

    await Start_new_user_reg.st1.set()


@dp.message_handler(state=Start_new_user_reg.st1)
async def continue_reg(message: types.Message, state: FSMContext):

    text = '''–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç? 
1) –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
2) –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ü–û –¢–ï–ú–ï –∏ –æ—Ç 4 —Å–ª–æ–≤ 
3) –°—Ç–∞–≤–∏—Ç–µ –ª–∞–π–∫ –Ω–∞ –ø–æ—Å—Ç
4) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∏ –∂–º—ë—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
5) –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞—á–∏—Å–ª—è–µ—Ç –≤–∞–º 1 –±–∞–ª–ª.
6) –≠—Ç–æ—Ç –±–∞–ª–ª –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —Å–≤–æ–∏ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Å–≤–æ–π –ø–æ—Å—Ç

1 –±–∞–ª–ª - 1 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –ª–∞–π–∫ –Ω–∞ –≤–∞—à –ø–æ—Å—Ç
–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –±–∞–ª–ª—ã –ø–æ –∫—É—Ä—Å—É 1 –±–∞–ª–ª = 2 —Ä—É–±–ª—è

–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è!'''

    await message.answer(text=text, reply_markup=start_menu2)
    await Start_new_user_reg.st2.set()


@dp.message_handler(state=Start_new_user_reg.st2)
async def continue_reg2(message: types.Message, state: FSMContext):
    text = '''    
–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–Ω—Å—Ç–∞–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ @nickname
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É:
1)–ú–∏–Ω–∏–º—É–º 5 –ø–æ—Å—Ç–æ–≤
2)–ú–∏–Ω–∏–º—É–º 20 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    '''
    await message.answer(text=text, reply_markup=ReplyKeyboardRemove())
    await Start_new_user_reg.st3.set()


@dp.message_handler(state=Start_new_user_reg.st3)
async def continue_reg3(message: types.Message, state: FSMContext):
    message_text = message.text
    await state.update_data(inst_akk=message_text)
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
    await message.answer(text='–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫–∞—É–Ω—Ç ...')

    parser = find_best(User_and_Exists)
    await wait_your_turn(parser)


    if message_text[0] == '@':
        message_text = message_text[1:]

    account = await parser.parse_user_without_search(message_text)
    parser.queue = parser.queue[1:]

    if account is None:
        await message.answer(text='–¢–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π.')
        return


    text = f'–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞: @{message_text}' + '\n'

    for key, vall in account.items():
        t = f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {key}: {vall}' + '\n'
        text += t
        print(text)
    text += f'–°—Å—ã–ª–∫–∞: https://instagram.com/{message_text}/' + '\n'


    try:
        print(account)
        post1 = int(account['–ü–æ—Å—Ç–æ–≤'])
        sabbs = int(account['–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'])

        if post1 < 5 or sabbs < 25:
            text += '–≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π.'
            await message.answer(text=text)
            return

    except:
        print('Account ok')


    text += '\n' + '–≠—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç?'


    await message.answer(text=text, reply_markup=yes_or_no_inline)

    await state.update_data(id=message.from_user.id)
    await state.update_data(instagram_account=message_text)

    await Start_new_user_reg.confirm_account.set()


@dp.callback_query_handler(text='no', state=Start_new_user_reg.confirm_account)
async def not_user_account(call: CallbackQuery, state: FSMContext):
    await call.answer()

    text = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–Ω—Å—Ç–∞–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ @nickname'
    await call.message.answer(text=text, reply_markup=ReplyKeyboardRemove())
    await Start_new_user_reg.st3.set()



@dp.callback_query_handler(text='yes', state=Start_new_user_reg.confirm_account)
async def user_account(call: CallbackQuery, state: FSMContext):
    await call.answer()

    data = await state.get_data()

    user_id =  data.get('id')
    account = data.get('instagram_account')

    db.update_instagram_akk(id=user_id, instagram_akk=account)
    await call.message.answer(text='–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å', reply_markup=main_menu)
    await state.finish()
    db_info = db.select_user(id=user_id)

    # await call.message.answer(text=db_info)
    print('!!! ======== !!!–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!!! ======== !!!')
    print(db_info)
